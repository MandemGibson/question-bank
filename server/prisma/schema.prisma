generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id         String   @id @unique @default(uuid())
  userId     String   @unique
  staff_id   String?
  student_id String?
  password   String
  staff      Staff?   @relation(fields: [staff_id, userId], references: [id, staff_id], onDelete: Cascade, onUpdate: Cascade, map: "staff_auth_fk")
  student    Student? @relation(fields: [student_id, userId], references: [id, student_id], onDelete: Cascade, onUpdate: Cascade, map: "student_auth_fk")

  @@unique([staff_id, userId], map: "staff_auth_pk")
  @@unique([student_id, userId], map: "student_auth_pk")
}

model Student {
  id              String     @id @default(uuid())
  student_id      String     @unique
  firstname       String
  middlename      String?
  lastname        String
  dob             DateTime
  residence       String
  level           Class      @relation(fields: [classId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  classId         String
  role            Int        @default(6631)
  guardians       Guardian[]
  date_registered DateTime?
  // profile_pic     Bytes?     @unique
  Results         Results[]
  auth            Auth?

  @@unique([id, student_id], map: "student_auth_fk")
}

model Guardian {
  id                String   @id @default(uuid())
  firstname         String
  middlename        String?
  lastname          String
  occupation        String
  primary_contact   String
  secondary_contact String?
  date_created      DateTime
  student           Student  @relation(fields: [studentId], references: [id])
  studentId         String
}

model Staff {
  id                String         @id @default(uuid())
  staff_id          String         @unique
  firstname         String
  middlename        String?
  lastname          String
  email             String         @unique
  primary_contact   String         @unique
  secondary_contact String?
  dob               DateTime
  residence         String
  is_admin          Boolean        @default(false)
  is_active         Boolean        @default(true)
  role              Int            @default(3921)
  subjects          StaffSubject[]
  date_registered   DateTime?      @default(now())
  topics            Topic[]
  // profile_pic       Bytes
  level             Class[]        @relation("StaffClasses")
  Auth              Auth?

  @@unique([staff_id, id], map: "staff_auth_fk")
}

model StaffSubject {
  id             String        @id @default(uuid())
  name           String        @unique
  code           String?
  staff          Staff[]
  academic_year  AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?
  term           Term?         @relation(fields: [termId], references: [id])
  termId         String?
  level          Class[]
}

model AcademicYear {
  id           String         @id @default(uuid())
  name         String
  staffSubject StaffSubject[]
}

model Term {
  id           String         @id @default(uuid())
  name         String
  staffSubject StaffSubject[]
}

model Class {
  id           String         @id @default(uuid())
  name         String         @unique
  Student      Student[]
  staffSubject StaffSubject[]
  topics       Topic[]
  staff        Staff[]        @relation("StaffClasses")
}

model Topic {
  id         String     @id @default(uuid())
  staff      Staff?     @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId    String?
  level      Class      @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId    String
  title      String
  questions  Question[]
  timeLimit  Int        @default(0)
  deadline   DateTime
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
}

model Question {
  id            String         @id @default(uuid())
  question      String
  answerChoices AnswerChoice[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  topic         Topic?         @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId       String?
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  topics  Topic[]
  Results Results[]
}

model AnswerChoice {
  id         String    @id @default(uuid())
  choice     String
  isCorrect  Boolean   @default(false)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String?
}

model Results {
  id         String   @id @default(uuid())
  result     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Admin {
  id       String @id @default(uuid())
  username String
  password String
  role     Int    @default(9291)
}

model Sessions {
  id     String  @id @default(uuid())
  userId String
  ip     String  @db.Inet
  valid  Boolean @default(true)
}

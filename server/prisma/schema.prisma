// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id              Int        @id @default(autoincrement())
  student_id      String     @unique
  firstname       String
  middlename      String?
  lastname        String
  dob             DateTime
  residence       String
  class           Class      @relation(fields: [classId], references: [id])
  classId         Int
  guardians       Guardian[]
  date_registered DateTime?
  profile_pic     Bytes      @unique
}

model Guardian {
  id                Int      @id @default(autoincrement())
  student_id        String
  primary_contact   String
  secondary_contact String?
  date_created      DateTime
  student           Student  @relation(fields: [studentId], references: [id])
  studentId         Int
}

model Staff {
  id                Int            @id @default(autoincrement())
  staff_id          String         @unique
  firstname         String
  middlename        String?
  lastname          String
  email             String         @unique
  primary_contact   String
  secondary_contact String?
  dob               DateTime
  residence         String
  is_admin          Boolean
  is_active         Boolean
  subjects          StaffSubject[]
  date_registered   DateTime?
  question          Question[]
  profile_pic       Bytes          @unique
  class             Class          @relation(fields: [classId], references: [id])
  classId           Int
}

model StaffSubject {
  id               Int          @id @default(autoincrement())
  staff_id         String
  name             String
  code             String
  academic_year_id Int
  term_id          Int
  class_id         Int
  staff            Staff        @relation(fields: [staffId], references: [id])
  staffId          Int
  academic_year    AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId   Int
  term             Term         @relation(fields: [termId], references: [id])
  termId           Int
  class            Class        @relation(fields: [classId], references: [id])
  classId          Int
}

model AcademicYear {
  id           Int            @id @default(autoincrement())
  name         String
  staffSubject StaffSubject[]
}

model Term {
  id           Int            @id @default(autoincrement())
  name         String
  staffSubject StaffSubject[]
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String
  Student      Student[]
  staffSubject StaffSubject[]
  question     Question[]
  staff        Staff[]
}

model Question {
  id            Int            @id @default(autoincrement())
  staff         Staff          @relation(fields: [staffId], references: [id])
  staffId       Int
  class         Class          @relation(fields: [classId], references: [id])
  classId       Int
  question      String
  answerChoices AnswerChoice[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category[]
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model AnswerChoice {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  choice     String
  isCorrect  Boolean  @default(false)
}

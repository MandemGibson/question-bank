// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id              String     @id @default(uuid())
  student_id      String     @unique
  firstname       String
  middlename      String?
  lastname        String
  dob             DateTime
  residence       String
  class           Class      @relation(fields: [classId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  classId         String
  guardians       Guardian[]
  date_registered DateTime?
  profile_pic     Bytes      @unique
  Results         Results[]
}

model Guardian {
  id                String   @id @default(uuid())
  student_id        String
  primary_contact   String
  secondary_contact String?
  date_created      DateTime
  student           Student  @relation(fields: [studentId], references: [id])
  studentId         String
}

model Staff {
  id                String         @id @default(uuid())
  staff_id          String         @unique
  firstname         String
  middlename        String?
  lastname          String
  email             String         @unique
  primary_contact   String         @unique
  secondary_contact String?
  dob               DateTime
  residence         String
  is_admin          Boolean
  is_active         Boolean
  subjects          StaffSubject[]
  date_registered   DateTime?
  topics            Topic[]
  profile_pic       Bytes
  class             Class[]
}

model StaffSubject {
  id               String       @id @default(uuid())
  staff_id         String
  name             String
  code             String
  academic_year_id Int
  term_id          Int
  class_id         Int
  staff            Staff[]
  academic_year    AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId   String
  term             Term         @relation(fields: [termId], references: [id])
  termId           String
  class            Class[]
}

model AcademicYear {
  id           String         @id @default(uuid())
  name         String
  staffSubject StaffSubject[]
}

model Term {
  id           String         @id @default(uuid())
  name         String
  staffSubject StaffSubject[]
}

model Class {
  id           String         @id @default(uuid())
  name         String
  Student      Student[]
  staffSubject StaffSubject[]
  topics       Topic[]
  staff        Staff[]
}

model Topic {
  id            String         @id @default(uuid())
  staff         Staff          @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId       String
  class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId       String
  title         String
  questions     Question[]
  timeLimit     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String
  answerChoices AnswerChoice[]
}

model Question {
  id            String         @id @default(uuid())
  question      String
  answerChoices AnswerChoice[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  topic         Topic?         @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId    String?
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  topics  Topic[]
  Results Results[]
}

model AnswerChoice {
  id         String    @id @default(uuid())
  topic      Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId    String
  choice     String
  isCorrect  Boolean   @default(false)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String?
}

model Results {
  id         String   @id @default(uuid())
  result     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id String @id @default(uuid())
}
